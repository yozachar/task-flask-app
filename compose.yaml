services:
  # celery broker
  redis:
    image: "docker.io/redis:latest"
    restart: "always"
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: "1s"
      timeout: "5s"
      retries: "10"
    volumes:
      - "rdb:/data"

  # primary db
  postgres:
    image: "docker.io/postgres:latest"
    restart: "always"
    ports:
      - "$PG_DB_PORT:$PG_DB_PORT"
    environment:
      POSTGRES_USER: "$POSTGRES_USER"
      POSTGRES_DB: "$POSTGRES_DB"
      POSTGRES_PASSWORD: "$POSTGRES_PASSWORD"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: "1s"
      timeout: "5s"
      retries: "10"
    volumes:
      - "pdb:/var/lib/postgresql/data"

  # app
  flask:
    # ports:
    #   - "5000:5000"
    environment:
      SECRET_KEY: "$SECRET_KEY"
      PG_DB_HOST: "$PG_DB_HOST"
      PG_DB_PORT: "$PG_DB_PORT"
      POSTGRES_USER: "$POSTGRES_USER"
      POSTGRES_DB: "$POSTGRES_DB"
      POSTGRES_PASSWORD: "$POSTGRES_PASSWORD"
    build:
      context: "."
      dockerfile: "containerfile"
    image: "cajon:dev"
    container_name: "cajon_dev"
    network_mode: "host"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  rdb:
  pdb:
